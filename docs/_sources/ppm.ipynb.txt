{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b1627b66-f9c1-4c38-9e6c-dd25b8d8f92b",
   "metadata": {},
   "source": [
    "# Parsing PPM files\n",
    "To show how we can mix ASCII and binary data, we have an example where we parse Portable PixMap files (PPM). These files have a small ASCII header and the image itself in binary. The header looks something like this:\n",
    "\n",
    "```\n",
    "P6   # this marks the file type in the Netpbm family\n",
    "640 480\n",
    "256\n",
    "<<binary rgb values: 3*w*h bytes>>\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dcf09929-f094-49b2-b18e-6600299c7086",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from dataclasses import dataclass\n",
    "from byteparsing import parse_bytes\n",
    "from byteparsing.parsers import (\n",
    "    text_literal, integer, eol, named_sequence, sequence, construct,\n",
    "    tokenize, item, array,  fmap, text_end_by, optional)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8a59c8c-f16b-4f16-9fec-4e64209758d9",
   "metadata": {},
   "source": [
    "The PPM header format allows for comments in the ASCII header."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2fdf9743-8e71-44a2-9f49-33fb9cbf8836",
   "metadata": {},
   "outputs": [],
   "source": [
    "comment = sequence(text_literal(\"#\"), text_end_by(\"\\n\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82ed35eb-6430-4001-9b9b-556b181e8351",
   "metadata": {},
   "source": [
    "We define a class that should contain all the data in the header."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dccd085c-0c97-48e2-a83f-85e03d2b5cfe",
   "metadata": {},
   "outputs": [],
   "source": [
    "@dataclass\n",
    "class Header:\n",
    "    width: int\n",
    "    height: int\n",
    "    maxint: int"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "884baea7-e9ce-43f7-afd7-538428604e86",
   "metadata": {},
   "source": [
    "Then we can construct a parser for this header, using `named_sequence` and `construct`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0ca943d4-c938-4bf2-8c78-2ad2711010c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "header = named_sequence(\n",
    "    _1 = tokenize(text_literal(\"P6\")),\n",
    "    _2 = optional(comment),\n",
    "    width = tokenize(integer),\n",
    "    height = tokenize(integer),\n",
    "    maxint = tokenize(integer)) >> construct(Header)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2616d26a-90c0-4c30-ad5f-c7f35f9a8b49",
   "metadata": {},
   "source": [
    "We'll have to pass on the header information to the parser for the binary blob somehow, so we define a function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "31099afb-aa54-4403-bd95-2710cecf2263",
   "metadata": {},
   "outputs": [],
   "source": [
    "def image_bytes(header: Header):\n",
    "    shape = (header.height, header.width, 3)\n",
    "    size = header.height * header.width * 3\n",
    "    return array(np.uint8, size) >> fmap(lambda a: a.reshape(shape))\n",
    "\n",
    "ppm_image = header >> image_bytes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2316576-b7ed-4e00-a129-5ed00e59b4ce",
   "metadata": {},
   "source": [
    "Let's test this on a sample image, and ignore the fact that `PIL` has a perfectly good parser for PPM files itself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cfec76d7-e5e6-4ec9-9faf-180ab132efa3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<PIL.Image.Image image mode=RGB size=269x326 at 0x7F5B66786E00>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data = open(\"python-logo.ppm\", \"rb\").read()\n",
    "image = parse_bytes(ppm_image, raw_data)\n",
    "\n",
    "from PIL import Image\n",
    "Image.frombytes(mode=\"RGB\", size=(image.shape[1], image.shape[0]), data=image)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
